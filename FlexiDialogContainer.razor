@namespace FlexiDialog

<style>
    .dialog-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.45);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
        overflow: visible;
    }

    .dialog {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        max-width: 80%;
        max-height: 80%;
        overflow: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: absolute;
    }

    .dialog-header {
        display: flex;
        width: 100%;
        justify-content: space-between;
    }
</style>

@if (DialogService.GetOpenDialogs().Any())
{
    <div class="dialog-container">
        @foreach (var dialogRef in DialogService.GetOpenDialogs().OrderBy(d => d.Options.ZIndex))
        {
            <section id="@dialogRef.Key" class="dialog" style="z-index: @dialogRef.Options.ZIndex;">
                <div class="dialog-header">
                    <span>
                        @dialogRef.Options.Header
                    </span>
                    <button @onclick="() => CloseDialog(dialogRef)">X</button>
                </div>
                <div class="dialog-body">
                    <CascadingValue Value="dialogRef">
                        @RenderDialog(dialogRef)
                    </CascadingValue>
                </div>
            </section>
        }
    </div>
}

@code {

    [Inject] public IDialogService DialogService { get; set; } = default!;

    protected override void OnInitialized()
    {
        DialogService.OnStateHasChanged += async () => await InvokeAsync(StateHasChanged);
    }

    public void CloseDialog(DialogRef dialogRef)
    {
        DialogService.Close(dialogRef);
    }

    private RenderFragment RenderDialog(DialogRef dialogRef)
    {
        return builder =>
        {
            if (dialogRef.DialogComponent != null)
            {
                builder.OpenComponent(0, dialogRef.DialogComponent);
                if (dialogRef.Parameters != null)
                {
                    foreach (var param in dialogRef.Parameters)
                    {
                        builder.AddAttribute(1, param.Key, param.Value);
                    }
                }
                builder.CloseComponent();
            }
            else
            {
                builder.AddContent(0, "Dialog Content Placeholder");
            }
        };
    }

    public void Dispose()
    {
        DialogService.OnStateHasChanged -= async () => await InvokeAsync(StateHasChanged);
    }
}